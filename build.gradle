def env = System.getenv()

buildscript {
    repositories {
        maven {
            url 'http://maven.ej-technologies.com/repository'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.edwgiz:maven-shade-plugin.log4j2-cachefile-transformer:2.6.1'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}


import com.github.edwgiz.mavenShadePlugin.log4j2CacheTransformer.PluginsCacheFileTransformer
import com.github.jengelman.gradle.plugins.shadow.relocation.Relocator
import org.apache.tools.zip.ZipOutputStream

import java.util.jar.JarOutputStream

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'java'
apply plugin: 'application'

group 'br.com.brjdevs.miyuki'
version '1.0.' + (env.containsKey('DRONE_BUILD_NUMBER') ? 'BUILD_' + env['DRONE_BUILD_NUMBER'] : 'DEV')
mainClassName = "br.com.brjdevs.miyuki.Loader"

println System.getProperty("java.home")

repositories {
    mavenCentral()
    jcenter()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}

dependencies {
    compile 'net.dv8tion:JDA:3.0.BETA_91'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6.2'
    compile group: 'com.rethinkdb', name: 'rethinkdb-driver', version: '2.3.3'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'com.rometools', name: 'rome', version: '1.7.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '1.7.2'

    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.4.1.RELEASE') {
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.1'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '1.4.1.RELEASE'
}

shadowJar {
    transform(new com.github.jengelman.gradle.plugins.shadow.transformers.Transformer() {
        PluginsCacheFileTransformer target = new PluginsCacheFileTransformer();

        @Override
        boolean canTransformResource(FileTreeElement element) {
            return target.canTransformResource(element.getPath());
        }

        @Override
        void transform(String path, InputStream is, List<Relocator> relocators) {
            target.processResource(path, is, relocators as List<org.apache.maven.plugins.shade.relocation.Relocator>);
        }

        @Override
        boolean hasTransformedResource() {
            return target.hasTransformedResource();
        }

        @Override
        void modifyOutputStream(ZipOutputStream jos) {
            target.modifyOutputStream(jos as JarOutputStream);
        }
    })
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources) {
        include 'miyuki.version'
        expand 'version': project.version
    }

    from(sourceSets.main.resources) {
        exclude 'miyuki.version'
    }
}

compileJava.options.encoding = 'UTF-8'

//jar {
//    manifest commonManifest
//}

sourceCompatibility = 1.8
targetCompatibility = 1.8

artifacts {
    archives shadowJar
}